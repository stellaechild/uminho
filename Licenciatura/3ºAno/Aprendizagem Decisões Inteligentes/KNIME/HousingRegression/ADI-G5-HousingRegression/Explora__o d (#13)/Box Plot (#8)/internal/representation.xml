<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
    <entry key="jsNamespace" type="xstring" value="knimeBoxplot"/>
    <config key="jsCode">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="/* global d3:false */%%00010window.knimeBoxplot = (function () {%%00010    var boxplot = {};%%00010    var _data = {};%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var maxY = 0;%%00010    var minY = 0;%%00010    var Y_TICK_COUNT = 5;%%00010    var Y_LABEL_MAX_WIDTH = 200;%%00010    var _representation, _value, layoutContainer,%%00010        drawControls, drawChart, updateTitle, updateSubtitle, processMissingValues, resize;%%00010%%00010    var MISSING_VALUES_ONLY = 'missingValuesOnly';%%00010    var IGNORED_MISSING_VALUES = 'ignoredMissingValues';%%00010    var NO_DATA_AVAILABLE = 'noDataAvailable';%%00010    var NO_DATA_COLUMN = 'noDataColumn';%%00010%%00010    boxplot.init = function (representation, value) {%%00010        // Store value and representation for later%%00010        _value = value;%%00010        _representation = representation;%%00010%%00010        // No numeric columns available?%%00010        if (_representation.options.columns.length === 0) {%%00010            alert('No numeric columns selected');%%00010            return;%%00010        }%%00010%%00010        // If no column to show is selected yet, we take the first from all candidates%%00010        if (!_value.options.numCol) {%%00010            _value.options.numCol = _representation.options.columns[0];%%00010        }%%00010%%00010        d3.select('html').style('width', '100%').style('height', '100%');%%00010        d3.select('body').style('width', '100%').style('height', '100%');%%00010%%00010        var body = d3.select('body');%%00010%%00010        // Create container for our content%%00010        layoutContainer = body.append('div')%%00010            .attr('id', 'layoutContainer')%%00010            .attr('class', 'knime-layout-container')%%00010            .style('min-width', MIN_WIDTH + 'px')%%00010            .style('min-height', MIN_HEIGHT + 'px');%%00010%%00010        // Size layout container based on sizing settings%%00010        if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010            layoutContainer.style('width', '100%')%%00010                .style('height', '100%');%%00010        } else {%%00010            layoutContainer.style('width', _representation.options.svg.width + 'px')%%00010                .style('height', _representation.options.svg.height + 'px');%%00010        }%%00010%%00010        // Add SVG element%%00010        var svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010        layoutContainer[0][0].appendChild(svg1);%%00010%%00010        var d3svg = d3.select('svg')%%00010            .style('display', 'block');%%00010        // Add rectangle for background color%%00010        d3svg.append('rect')%%00010            .attr('id', 'bgr')%%00010            .attr('fill', _representation.options.backgroundColor);%%00010%%00010        // Append a group for the plot and add a rectangle for the data area background%%00010        d3svg.append('g')%%00010            .attr('id', 'plotG')%%00010            .append('rect')%%00010            .attr('id', 'da')%%00010            .attr('fill', _representation.options.daColor);%%00010%%00010        // Title%%00010        d3svg.append('text')%%00010            .attr('id', 'title')%%00010            .attr('class', 'knime-title')%%00010            .attr('x', 20)%%00010            .attr('y', 30)%%00010            .text(_value.options.title);%%00010%%00010        // Subtitle%%00010        d3svg.append('text')%%00010            .attr('id', 'subtitle')%%00010            .attr('class', 'knime-subtitle')%%00010            .attr('x', 20)%%00010            .text(_value.options.subtitle);%%00010        // y attr is set in drawChart%%00010%%00010        drawChart();%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010%%00010        if (window.parent.KnimePageLoader) {%%00010            window.parent.KnimePageLoader.autoResize(window.frameElement.id);%%00010        }%%00010    };%%00010%%00010    drawControls = function () {%%00010        if (_representation.options.displayFullscreen) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.enableTitleEdit || _representation.options.enableSubtitleEdit) {%%00010            if (_representation.options.enableTitleEdit) {%%00010                var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title,%%00010                    updateTitle, true);%%00010                knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010            }%%00010%%00010            if (_representation.options.enableSubtitleEdit) {%%00010                var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                    updateSubtitle, true);%%00010                knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010            }%%00010%%00010            if (!_representation.options.multi &amp;&amp; _representation.options.enableColumnSelection) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (!_representation.options.multi &amp;&amp; _representation.options.enableColumnSelection) {%%00010            var colSelect = knimeService.createMenuSelect('columnSelect', _value.options.numCol,%%00010                _representation.options.columns, function () {%%00010                    _value.options.numCol = this.value;%%00010                    drawChart();%%00010                });%%00010            knimeService.addMenuItem('Selected column:', 'long-arrow-up', colSelect);%%00010        }%%00010    };%%00010%%00010    updateTitle = function () {%%00010        var hadTitle = _value.options.title.length &gt; 0;%%00010        _value.options.title = document.getElementById('chartTitleText').value;%%00010        var hasTitle = _value.options.title.length &gt; 0;%%00010        if (hasTitle !== hadTitle) {%%00010            // if the title appeared or disappeared, we need to resize the chart%%00010            drawChart(true);%%00010        }%%00010        d3.select('#title').text(_value.options.title);%%00010    };%%00010%%00010    updateSubtitle = function () {%%00010        var hadTitle = _value.options.subtitle.length &gt; 0;%%00010        _value.options.subtitle = document.getElementById('chartSubtitleText').value;%%00010        var hasTitle = _value.options.subtitle.length &gt; 0;%%00010        if (hasTitle !== hadTitle) {%%00010            // if the subtitle appeared or disappeared, we need to resize the chart%%00010            drawChart(true);%%00010        }%%00010        d3.select('#subtitle').text(_value.options.subtitle);%%00010    };%%00010%%00010    // Draws the chart. If resizing is true, there are no animations.%%00010    drawChart = function (resizing) {%%00010%%00010        // Select the data to show%%00010        if (_representation.options.multi) {%%00010            _data = _representation.inObjects[0].stats;%%00010        } else {%%00010            _data = {};%%00010            var numCol = _value.options.numCol;%%00010            _data[numCol] = _representation.inObjects[0].stats[numCol];%%00010            if (typeof _data[numCol] === 'undefined') {%%00010                delete _data[numCol];%%00010            }%%00010        }%%00010%%00010        // Find the maximum y-value for the axis%%00010        maxY = Number.NEGATIVE_INFINITY;%%00010        minY = Number.POSITIVE_INFINITY;%%00010        for (var key in _data) {%%00010            maxY = Math.max(_data[key].max, maxY);%%00010            minY = Math.min(_data[key].min, minY);%%00010        }%%00010%%00010        // Calculate the correct chart width%%00010        var cw = Math.max(MIN_WIDTH, _representation.options.svg.width);%%00010        var ch = Math.max(MIN_HEIGHT, _representation.options.svg.height);%%00010%%00010        var chartWidth = cw + 'px';%%00010        var chartHeight = ch + 'px';%%00010        // If we are fullscreen, we set the chart width to 100%%%00010        if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010            chartWidth = '100%';%%00010            chartHeight = '100%';%%00010        }%%00010%%00010        // The margins for the plot area%%00010        var topMargin = 10;%%00010        if (_value.options.title &amp;&amp; _value.options.subtitle) {%%00010            topMargin += 50;%%00010        } else if (_value.options.title) {%%00010            topMargin += 36;%%00010        } else if (_value.options.subtitle) {%%00010            topMargin += 26;%%00010        }%%00010%%00010        var margins = {%%00010            top: topMargin,%%00010            bottom: 40,%%00010            right: 10%%00010        };%%00010%%00010        d3.select('#subtitle').attr('y', topMargin - 14);%%00010%%00010        var d3svg = d3.select('svg')%%00010            .attr({ width: cw, height: ch })%%00010            .style({ width: chartWidth, height: chartHeight });%%00010%%00010        // Calculate height of the plot area (without x-axis)%%00010        var h = Math.max(50, parseInt(d3svg.style('height'), 10) - margins.top - margins.bottom);%%00010%%00010        // y-axis scale%%00010        var yScale = d3.scale.linear().domain([minY, maxY]).range([h, 0]).nice();%%00010%%00010        // determine required margin-left%%00010        var yLabels = yScale.ticks(Y_TICK_COUNT).map(yScale.tickFormat(Y_TICK_COUNT)).map(String);%%00010        var maxYLabelWidth = knimeService.measureAndTruncate(yLabels, {%%00010            container: d3svg.node(),%%00010            classes: 'knime-tick-label',%%00010            maxWidth: Y_LABEL_MAX_WIDTH%%00010        }).max.maxWidth;%%00010        margins.left = 15 + maxYLabelWidth;%%00010%%00010        // Calculate width of the plot area (without y-axis)%%00010        var w = Math.max(50, parseInt(d3svg.style('width'), 10) - margins.left - margins.right);%%00010%%00010        // x-axis scale%%00010        var xScale = d3.scale.ordinal().domain(d3.keys(_data)).rangeBands([0, w], 0.75, 0.5);%%00010%%00010        // Position the plot group based on the margins%%00010        var plotG = d3svg.select('#plotG')%%00010            .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')');%%00010%%00010        // Resize background rectangles%%00010        plotG.select('#da').attr({%%00010            width: w,%%00010            height: h + 5%%00010        });%%00010        d3svg.select('#bgr').attr({%%00010            width: w + margins.left + margins.right,%%00010            height: h + margins.top + margins.bottom%%00010        });%%00010%%00010        // d3 axes%%00010        var xAxis = d3.svg.axis().scale(xScale)%%00010            .orient('bottom');%%00010        var yAxis = d3.svg.axis().scale(yScale)%%00010            .orient('left').ticks(Y_TICK_COUNT);%%00010        // Remove axes so they are redrawn%%00010        d3.selectAll('.axis').remove();%%00010%%00010        // Append and style x-axis%%00010        var d3XAxis = plotG.append('g')%%00010            .attr('class', 'x axis knime-x knime-axis')%%00010            .attr('transform', 'translate(0,' + (h + 5) + ')')%%00010            .call(xAxis);%%00010        d3XAxis.selectAll('line,path')%%00010            .attr('fill', 'none')%%00010            .attr('stroke', 'black')%%00010            .attr('shape-rendering', 'crispEdges');%%00010%%00010        // Append and style y-axis%%00010        var d3YAxis = plotG.append('g')%%00010            .attr('class', 'y axis knime-y knime-axis')%%00010            .call(yAxis);%%00010        d3YAxis.selectAll('line,path')%%00010            .attr('fill', 'none')%%00010            .attr('stroke', 'black')%%00010            .attr('shape-rendering', 'crispEdges');%%00010%%00010        d3.selectAll('.domain')%%00010            .classed('knime-axis-line', true);%%00010        var ticks = d3.selectAll('.tick')%%00010            .classed('knime-tick', true);%%00010        ticks.selectAll('line')%%00010            .classed('knime-tick-line', true);%%00010        ticks.selectAll('text')%%00010            .classed('knime-tick-label', true);%%00010%%00010        // Animate only when running in view and not resizing%%00010        var duration = _representation.runningInView &amp;&amp; !resizing ? 500 : 0;%%00010%%00010        // Create a selection for each box with data that we created at the beginning%%00010%%00010        var boxG = plotG.selectAll('g.box')%%00010            .data(d3.entries(_data).map(function (d) {%%00010                d.value.valid = d.value.upperQuartile &gt;= d.value.lowerQuartile;%%00010                return d;%%00010            }), function (d) {%%00010                return _representation.options.multi ? d.key : '__dummy__';%%00010            });%%00010%%00010        // Remove boxes that are not in the data anymore%%00010        boxG.exit().remove();%%00010%%00010        // Append a group element for each new box and shift it according to the class%%00010        var box = boxG.enter().append('g')%%00010            .attr('class', 'box')%%00010            .attr('transform', function (d) { return 'translate(' + xScale(d.key) + ',0)'; });%%00010%%00010        // Transition all boxes to their position%%00010        d3.selectAll('.box').transition().duration(duration)%%00010            .attr('transform', function (d) { return 'translate(' + xScale(d.key) + ',0)'; });%%00010%%00010        // The main rectangle for the box%%00010        box.append('rect')%%00010            .attr('class', 'boxrect')%%00010            .attr('stroke', 'black')%%00010            .attr('fill', _representation.options.boxColor || 'none');%%00010%%00010        // Update the box according to the data%%00010        boxG.selectAll('.boxrect')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('y', function (d) { return yScale(d.value.upperQuartile); })%%00010            .attr('height', function (d) { return yScale(d.value.lowerQuartile) - yScale(d.value.upperQuartile); })%%00010            .attr('width', xScale.rangeBand());%%00010%%00010        // The middle of the box on the x-axis%%00010        var middle = xScale.rangeBand() / 2;%%00010%%00010        // Text for the upper quartile%%00010        box.append('text')%%00010            .attr('x', -5)%%00010            .attr('text-anchor', 'end')%%00010            .attr('class', 'uqText knime-label');%%00010        boxG.selectAll('.uqText')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('y', function (d) { return yScale(d.value.upperQuartile) + 3; })%%00010            .text(function (d) { return Math.round(d.value.upperQuartile * 100) / 100; });%%00010%%00010        // Text for the lower quartile%%00010        box.append('text')%%00010            .attr('x', -5)%%00010            .attr('text-anchor', 'end')%%00010            .attr('class', 'lqText knime-label');%%00010        boxG.selectAll('.lqText')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('y', function (d) { return yScale(d.value.lowerQuartile) + 3; })%%00010            .text(function (d) { return Math.round(d.value.lowerQuartile * 100) / 100; });%%00010%%00010%%00010        // Median%%00010        box.append('line')%%00010            .attr('stroke', 'black')%%00010            .attr('stroke-width', 3)%%00010            .attr('x1', '0')%%00010            .attr('class', 'median');%%00010%%00010        boxG.selectAll('.median')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('x2', xScale.rangeBand())%%00010            .attr('y1', function (d) { return yScale(d.value.median); })%%00010            .attr('y2', function (d) { return yScale(d.value.median); });%%00010%%00010        box.append('text')%%00010            .attr('class', 'medianText knime-label');%%00010%%00010        boxG.selectAll('.medianText')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('x', xScale.rangeBand() + 5)%%00010            .attr('y', function (d) { return yScale(d.value.median) + 3; })%%00010            .text(function (d) { return Math.round(d.value.median * 100) / 100; });%%00010%%00010        // Upper whisker%%00010        box.append('line')%%00010            .attr('stroke', 'black')%%00010            .attr('class', 'uwL1');%%00010%%00010        boxG.selectAll('.uwL1')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x1', middle)%%00010            .attr('x2', middle)%%00010            .attr('stroke-dasharray', '5,5')%%00010            .attr('y1', function (d) { return yScale(d.value.upperQuartile); })%%00010            .attr('y2', function (d) { return yScale(d.value.upperWhisker); });%%00010%%00010%%00010        box.append('line')%%00010            .attr('stroke', 'black')%%00010            .attr('x1', '0')%%00010            .attr('class', 'uwL2');%%00010%%00010        boxG.selectAll('.uwL2')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x2', xScale.rangeBand())%%00010            .attr('y1', function (d) { return yScale(d.value.upperWhisker); })%%00010            .attr('y2', function (d) { return yScale(d.value.upperWhisker); });%%00010%%00010        box.append('text')%%00010            .attr('class', 'uwText knime-label');%%00010%%00010        boxG.selectAll('.uwText')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x', xScale.rangeBand() + 5)%%00010            .attr('y', function (d) { return yScale(d.value.upperWhisker) + 10; })%%00010            .text(function (d) { return Math.round(d.value.upperWhisker * 100) / 100; });%%00010%%00010        // Lower whisker%%00010        box.append('line')%%00010            .attr('stroke', 'black')%%00010            .attr('class', 'ulL1');%%00010%%00010        boxG.selectAll('.ulL1')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x1', middle)%%00010            .attr('x2', middle)%%00010            .attr('stroke-dasharray', '5,5')%%00010            .attr('y1', function (d) { return yScale(d.value.lowerQuartile); })%%00010            .attr('y2', function (d) { return yScale(d.value.lowerWhisker); });%%00010%%00010        box.append('line')%%00010            .attr('stroke', 'black')%%00010            .attr('x1', '0')%%00010            .attr('class', 'ulL2');%%00010%%00010        boxG.selectAll('.ulL2')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x2', xScale.rangeBand())%%00010            .attr('y1', function (d) { return yScale(d.value.lowerWhisker); })%%00010            .attr('y2', function (d) { return yScale(d.value.lowerWhisker); });%%00010%%00010        box.append('text')%%00010            .attr('class', 'ulText knime-label');%%00010%%00010        boxG.selectAll('.ulText')%%00010            .data(function (d) { return [d]; })%%00010            .transition().duration(duration)%%00010            .attr('opacity', function (d) { return d.value.valid ? 1 : 0; })%%00010            .attr('x', xScale.rangeBand() + 5)%%00010            .attr('y', function (d) { return yScale(d.value.lowerWhisker) - 3; })%%00010            .text(function (d) { return Math.round(d.value.lowerWhisker * 100) / 100; });%%00010%%00010        // Mild outliers%%00010        var outl = boxG.selectAll('circle.mo')%%00010            .data(function (d) { return d.value.mildOutliers; });%%00010%%00010        outl.enter().append('circle')%%00010            .attr('class', 'mo')%%00010            .attr('r', 5)%%00010            .attr('fill', _representation.options.daColor)%%00010            .attr('stroke', 'black')%%00010            .attr('cx', middle)%%00010            .attr('cy', function (d) { return yScale(d.value); })%%00010            .append('title')%%00010            .attr('class', 'knime-label')%%00010            .text(function (d) { return d.rowKey; });%%00010%%00010        outl.transition().duration(duration)%%00010            .attr('cx', middle)%%00010            .attr('cy', function (d) { return yScale(d.value); });%%00010%%00010        outl.exit().transition().style('opacity', 0).each('end', function () { d3.select(this).remove(); });%%00010%%00010        // Extreme outliers%%00010        var exoutl = boxG.selectAll('g.eo')%%00010            .data(function (d) { return d.value.extremeOutliers; });%%00010%%00010        var enterG = exoutl.enter().append('g')%%00010            .attr('class', 'eo')%%00010            .attr('transform', function (d) { return 'translate(' + middle + ',' + yScale(d.value) + ')'; });%%00010%%00010        var crossSize = 4;%%00010%%00010        enterG.append('line')%%00010            .attr({%%00010                x1: -crossSize,%%00010                y1: -crossSize,%%00010                x2: crossSize,%%00010                y2: crossSize,%%00010                'stroke-width': 1.5,%%00010                'stroke-linecap': 'round'%%00010            })%%00010            .append('title')%%00010            .attr('class', 'knime-label')%%00010            .text(function (d) { return d.rowKey; });%%00010%%00010        enterG.append('line')%%00010            .attr({%%00010                x1: -crossSize,%%00010                y1: crossSize,%%00010                x2: crossSize,%%00010                y2: -crossSize,%%00010                'stroke-width': 1.5,%%00010                'stroke-linecap': 'round'%%00010            })%%00010            .append('title')%%00010            .attr('class', 'knime-label')%%00010            .text(function (d) { return d.rowKey; });%%00010%%00010        exoutl.transition().duration(duration)%%00010            .attr('transform', function (d) { return 'translate(' + middle + ',' + yScale(d.value) + ')'; });%%00010%%00010        // Fade out outliers%%00010        exoutl.exit().transition().style('opacity', 0).each('end', function () { d3.select(this).remove(); });%%00010%%00010        processMissingValues();%%00010%%00010        // Set resize handler%%00010        if (_representation.options.svg.fullscreen) {%%00010            var win = document.defaultView || document.parentWindow;%%00010            win.onresize = resize;%%00010        }%%00010    };%%00010%%00010    resize = function (event) {%%00010        drawChart(true);%%00010    };%%00010%%00010    processMissingValues = function () {%%00010        if (!_representation.options.showWarnings) {%%00010            return;%%00010        }%%00010%%00010        knimeService.clearWarningMessage(NO_DATA_AVAILABLE);%%00010        knimeService.clearWarningMessage(MISSING_VALUES_ONLY);%%00010        knimeService.clearWarningMessage(IGNORED_MISSING_VALUES);%%00010        knimeService.clearWarningMessage(NO_DATA_COLUMN);%%00010%%00010        var excludedDataCols = _representation.inObjects[0].excludedDataCols;%%00010        var numMissValPerCol = _representation.inObjects[0].numMissValPerCol;%%00010        var dataCols = _representation.options.columns;%%00010%%00010        // temporary workaround for being able to select a data column which was not included in the node settings%%00010        if (dataCols.indexOf(_value.options.numCol) === -1) {%%00010            knimeService.setWarningMessage('No chart was generated since the selected column was not included in the ' +%%00010                'node configuration dialog.\nPlease choose another column or add the selected column to the list of ' +%%00010                'included columns.', NO_DATA_COLUMN);%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.multi) {%%00010            // plot multiple boxes%%00010            if (excludedDataCols.length === dataCols.length) {%%00010                knimeService.setWarningMessage('No chart was generated since all data columns have only missing ' +%%00010                    'values or special doubles.\nRe-run the workflow with different data.', NO_DATA_AVAILABLE);%%00010            } else {%%00010                if (!_representation.options.reportOnMissingValues) {%%00010                    return;%%00010                }%%00010                if (excludedDataCols.length &gt; 0) {%%00010                    knimeService.setWarningMessage('Following data columns contain only missing values or special ' +%%00010                        'doubles and were excluded from the view:\n    ' + excludedDataCols.join('\n    '),%%00010                        MISSING_VALUES_ONLY);%%00010                }%%00010                if (Object.keys(numMissValPerCol).length &gt; 0) {%%00010                    var str = '';%%00010                    for (var key in numMissValPerCol) {%%00010                        if (numMissValPerCol.hasOwnProperty(key)) {%%00010                            str += '    ' + key + ' - ' + numMissValPerCol[key] +%%00010                            ' missing value(s) or special double(s)\n';%%00010                        }%%00010                    }%%00010                    knimeService.setWarningMessage('Missing values or special doubles ignored during statistics ' +%%00010                        'calculations per data column:\n' + str, IGNORED_MISSING_VALUES);%%00010                }%%00010            }%%00010        } else {%%00010            // plot a box for only one data column%%00010            if (excludedDataCols.indexOf(_value.options.numCol) !== -1) {%%00010                knimeService.setWarningMessage('No chart was generated since the selected data column has only ' +%%00010                    'missing values or special doubles.\nChoose another data column or re-run the workflow with ' +%%00010                    'different data.', NO_DATA_AVAILABLE);%%00010            } else if (typeof numMissValPerCol[_value.options.numCol] !== 'undefined' &amp;&amp;%%00010                _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage('Missing values or special doubles ignored during statistics ' +%%00010                    'calculations:\n' + numMissValPerCol[_value.options.numCol] + ' missing value(s) or special ' +%%00010                    'double(s).', IGNORED_MISSING_VALUES);%%00010            }%%00010        }%%00010    };%%00010%%00010    boxplot.getSVG = function () {%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    boxplot.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    boxplot.getComponentValue = function () {%%00010        return _value;%%00010    };%%00010%%00010    return boxplot;%%00010%%00010})();%%00010"/>
    </config>
    <config key="cssCode">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value=".axis path,%%00010line {%%00010    fill: none;%%00010    stroke: #000;%%00010    shape-rendering: crispEdges;%%00010}%%00010%%00010#controlContainer {%%00010%%00009position : relative; %%00010    bottom : 0px;%%00010    width : 100%; %%00010    padding : 5px; %%00010    padding-left : 60px;%%00010    border-top : 1px solid black; %%00010    background-color : white;%%00010    box-sizing: border-box;%%00010}"/>
    </config>
    <config key="jsDependencies">
        <entry key="numSettings" type="xint" value="2"/>
        <config key="dependency_0">
            <entry key="name" type="xstring" value="D3"/>
            <entry key="path" type="xstring" value="js-lib/d3/d3.v3_2_8.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" isnull="true" value=""/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="0"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
        <config key="dependency_1">
            <entry key="name" type="xstring" value="jQuery"/>
            <entry key="path" type="xstring" value="js-lib/jQuery/jquery-1.11.0.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" isnull="true" value=""/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="0"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
    </config>
    <config key="cssDependencies">
        <entry key="array-size" type="xint" value="0"/>
    </config>
    <entry key="new" type="xboolean" value="false"/>
    <entry key="inView" type="xboolean" value="true"/>
    <config key="tableIds">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="7c705828-25fa-4206-9623-bd131d3d5086"/>
    </config>
    <config key="variables">
        <entry key="numSettings" type="xint" value="1"/>
        <entry key="mapClass" type="xstring" value="string"/>
        <entry key="key_0" type="xstring" value="knime.workspace"/>
        <entry key="class_0" type="xstring" value="java.lang.String"/>
        <entry key="value_0" type="xstring" value="/home/vicshadow/Program_Files/knime_4.5.1/workspace"/>
    </config>
    <config key="binaryFiles">
        <entry key="numSettings" type="xint" value="0"/>
        <entry key="mapClass" type="xstring" value="string"/>
    </config>
    <config key="options">
        <entry key="numSettings" type="xint" value="13"/>
        <entry key="mapClass" type="xstring" value="object"/>
        <entry key="key_0" type="xstring" value="backgroundColor"/>
        <entry key="class_0" type="xstring" value="java.lang.String"/>
        <entry key="value_0" type="xstring" value="#FFFFFF"/>
        <entry key="key_1" type="xstring" value="svg"/>
        <entry key="class_1" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
        <config key="value_1">
            <entry key="width" type="xint" value="800"/>
            <entry key="height" type="xint" value="600"/>
            <entry key="fullscreen" type="xboolean" value="true"/>
        </config>
        <entry key="key_2" type="xstring" value="columns"/>
        <entry key="class_2" type="xstring" value="[Ljava.lang.String;"/>
        <config key="value_2">
            <entry key="array-size" type="xint" value="6"/>
            <entry key="0" type="xstring" value="Avg. Area Income"/>
            <entry key="1" type="xstring" value="Avg. Area House Age"/>
            <entry key="2" type="xstring" value="Avg. Area Number of Rooms"/>
            <entry key="3" type="xstring" value="Avg. Area Number of Bedrooms"/>
            <entry key="4" type="xstring" value="Area Population"/>
            <entry key="5" type="xstring" value="Price"/>
        </config>
        <entry key="key_3" type="xstring" value="boxColor"/>
        <entry key="class_3" type="xstring" value="java.lang.String"/>
        <entry key="value_3" type="xstring" value="#FFFFFF"/>
        <entry key="key_4" type="xstring" value="enableTitleEdit"/>
        <entry key="class_4" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_4" type="xboolean" value="true"/>
        <entry key="key_5" type="xstring" value="displayFullscreen"/>
        <entry key="class_5" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_5" type="xboolean" value="true"/>
        <entry key="key_6" type="xstring" value="multi"/>
        <entry key="class_6" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_6" type="xboolean" value="true"/>
        <entry key="key_7" type="xstring" value="reportOnMissingValues"/>
        <entry key="class_7" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_7" type="xboolean" value="true"/>
        <entry key="key_8" type="xstring" value="enableViewControls"/>
        <entry key="class_8" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_8" type="xboolean" value="true"/>
        <entry key="key_9" type="xstring" value="enableColumnSelection"/>
        <entry key="class_9" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_9" type="xboolean" value="true"/>
        <entry key="key_10" type="xstring" value="showWarnings"/>
        <entry key="class_10" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_10" type="xboolean" value="true"/>
        <entry key="key_11" type="xstring" value="enableSubtitleEdit"/>
        <entry key="class_11" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_11" type="xboolean" value="true"/>
        <entry key="key_12" type="xstring" value="daColor"/>
        <entry key="class_12" type="xstring" value="java.lang.String"/>
        <entry key="value_12" type="xstring" value="#FFFFFF"/>
    </config>
    <config key="inObjects">
        <entry key="numSettings" type="xint" value="1"/>
        <config key="inObject_0">
            <entry key="className" type="xstring" value="org.knime.dynamic.js.base.boxplot.BoxplotProcessor_v2$BoxPlotResult"/>
            <entry key="jsonValue" type="xstring" value="{&quot;m_stats&quot;:{&quot;Avg. Area Income&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row558&quot;,&quot;value&quot;:99629.01358134777},{&quot;rowKey&quot;:&quot;Row2025&quot;,&quot;value&quot;:38139.919044520015},{&quot;rowKey&quot;:&quot;Row2300&quot;,&quot;value&quot;:98468.2536411164},{&quot;rowKey&quot;:&quot;Row411&quot;,&quot;value&quot;:36100.444226680745},{&quot;rowKey&quot;:&quot;Row3069&quot;,&quot;value&quot;:35454.714659475445},{&quot;rowKey&quot;:&quot;Row2242&quot;,&quot;value&quot;:38868.25031141422},{&quot;rowKey&quot;:&quot;Row4449&quot;,&quot;value&quot;:39777.606906208486},{&quot;rowKey&quot;:&quot;Row1096&quot;,&quot;value&quot;:97548.31041260507},{&quot;rowKey&quot;:&quot;Row12&quot;,&quot;value&quot;:39033.809236982364},{&quot;rowKey&quot;:&quot;Row844&quot;,&quot;value&quot;:39411.652787814426},{&quot;rowKey&quot;:&quot;Row3541&quot;,&quot;value&quot;:102881.12090226932},{&quot;rowKey&quot;:&quot;Row1891&quot;,&quot;value&quot;:101144.3239296864},{&quot;rowKey&quot;:&quot;Row4716&quot;,&quot;value&quot;:38530.12447825256},{&quot;rowKey&quot;:&quot;Row4844&quot;,&quot;value&quot;:37908.67586272925},{&quot;rowKey&quot;:&quot;Row2597&quot;,&quot;value&quot;:38734.005216471945},{&quot;rowKey&quot;:&quot;Row1597&quot;,&quot;value&quot;:39294.036523316114},{&quot;rowKey&quot;:&quot;Row3798&quot;,&quot;value&quot;:97669.06449084358},{&quot;rowKey&quot;:&quot;Row4400&quot;,&quot;value&quot;:99317.82314540037},{&quot;rowKey&quot;:&quot;Row962&quot;,&quot;value&quot;:101928.85805987818},{&quot;rowKey&quot;:&quot;Row4744&quot;,&quot;value&quot;:39653.77003073781},{&quot;rowKey&quot;:&quot;Row2719&quot;,&quot;value&quot;:101599.6705804352},{&quot;rowKey&quot;:&quot;Row2092&quot;,&quot;value&quot;:35608.986237077515},{&quot;rowKey&quot;:&quot;Row1271&quot;,&quot;value&quot;:37971.20756623529},{&quot;rowKey&quot;:&quot;Row4087&quot;,&quot;value&quot;:100741.29858525377},{&quot;rowKey&quot;:&quot;Row3144&quot;,&quot;value&quot;:38571.963669753466},{&quot;rowKey&quot;:&quot;Row1734&quot;,&quot;value&quot;:104702.7242570266},{&quot;rowKey&quot;:&quot;Row3183&quot;,&quot;value&quot;:38122.524488262905},{&quot;rowKey&quot;:&quot;Row4855&quot;,&quot;value&quot;:35797.323121548245},{&quot;rowKey&quot;:&quot;Row1459&quot;,&quot;value&quot;:35963.330809062856},{&quot;rowKey&quot;:&quot;Row3483&quot;,&quot;value&quot;:97881.58727937557},{&quot;rowKey&quot;:&quot;Row693&quot;,&quot;value&quot;:107701.74837763935}],&quot;extremeOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row39&quot;,&quot;value&quot;:17796.631189543397}],&quot;median&quot;:68804.28640371616,&quot;min&quot;:17796.631189543397,&quot;lowerWhisker&quot;:40141.566476517415,&quot;lowerQuartile&quot;:61479.919568829755,&quot;upperQuartile&quot;:75784.34219203914,&quot;upperWhisker&quot;:97112.361251824,&quot;max&quot;:107701.74837763935},&quot;Avg. Area House Age&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row1494&quot;,&quot;value&quot;:3.2148681463036715},{&quot;rowKey&quot;:&quot;Row4859&quot;,&quot;value&quot;:8.91609294469722},{&quot;rowKey&quot;:&quot;Row1074&quot;,&quot;value&quot;:2.644304186036705},{&quot;rowKey&quot;:&quot;Row4324&quot;,&quot;value&quot;:3.0047168362430168},{&quot;rowKey&quot;:&quot;Row2898&quot;,&quot;value&quot;:9.125282872631168},{&quot;rowKey&quot;:&quot;Row1726&quot;,&quot;value&quot;:3.205828406711825},{&quot;rowKey&quot;:&quot;Row4565&quot;,&quot;value&quot;:2.7976190270628174},{&quot;rowKey&quot;:&quot;Row2465&quot;,&quot;value&quot;:2.9227361530512215},{&quot;rowKey&quot;:&quot;Row1859&quot;,&quot;value&quot;:3.1057512377015195},{&quot;rowKey&quot;:&quot;Row2366&quot;,&quot;value&quot;:3.2417159800155395},{&quot;rowKey&quot;:&quot;Row1855&quot;,&quot;value&quot;:8.68843407427393},{&quot;rowKey&quot;:&quot;Row1091&quot;,&quot;value&quot;:8.991399330611651},{&quot;rowKey&quot;:&quot;Row847&quot;,&quot;value&quot;:3.2782275964055096},{&quot;rowKey&quot;:&quot;Row1777&quot;,&quot;value&quot;:8.973440775154549},{&quot;rowKey&quot;:&quot;Row1628&quot;,&quot;value&quot;:2.6830429033311556},{&quot;rowKey&quot;:&quot;Row4429&quot;,&quot;value&quot;:3.118801699824495},{&quot;rowKey&quot;:&quot;Row2432&quot;,&quot;value&quot;:3.1448941915387927},{&quot;rowKey&quot;:&quot;Row3138&quot;,&quot;value&quot;:9.008900092194578},{&quot;rowKey&quot;:&quot;Row3831&quot;,&quot;value&quot;:3.2320594904933926},{&quot;rowKey&quot;:&quot;Row1285&quot;,&quot;value&quot;:3.055370327387371},{&quot;rowKey&quot;:&quot;Row3989&quot;,&quot;value&quot;:9.51908806613594},{&quot;rowKey&quot;:&quot;Row4978&quot;,&quot;value&quot;:8.899713346862931},{&quot;rowKey&quot;:&quot;Row918&quot;,&quot;value&quot;:8.764785540314001},{&quot;rowKey&quot;:&quot;Row4488&quot;,&quot;value&quot;:2.7972149539129383},{&quot;rowKey&quot;:&quot;Row3388&quot;,&quot;value&quot;:8.702959652056817}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:5.970428947124802,&quot;min&quot;:2.644304186036705,&quot;lowerWhisker&quot;:3.3425991736536087,&quot;lowerQuartile&quot;:5.322278623622729,&quot;upperQuartile&quot;:6.650870225607854,&quot;upperWhisker&quot;:8.641820766251389,&quot;max&quot;:9.51908806613594},&quot;Avg. Area Number of Rooms&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row1799&quot;,&quot;value&quot;:3.950972652889892},{&quot;rowKey&quot;:&quot;Row28&quot;,&quot;value&quot;:4.242191301572632},{&quot;rowKey&quot;:&quot;Row2676&quot;,&quot;value&quot;:9.921519788746023},{&quot;rowKey&quot;:&quot;Row1423&quot;,&quot;value&quot;:4.129733360831915},{&quot;rowKey&quot;:&quot;Row3803&quot;,&quot;value&quot;:4.147430721617345},{&quot;rowKey&quot;:&quot;Row3806&quot;,&quot;value&quot;:10.024375374429383},{&quot;rowKey&quot;:&quot;Row3922&quot;,&quot;value&quot;:4.027930715527429},{&quot;rowKey&quot;:&quot;Row4777&quot;,&quot;value&quot;:9.802010413706904},{&quot;rowKey&quot;:&quot;Row2503&quot;,&quot;value&quot;:9.841095462796725},{&quot;rowKey&quot;:&quot;Row3039&quot;,&quot;value&quot;:9.916528434831127},{&quot;rowKey&quot;:&quot;Row3336&quot;,&quot;value&quot;:10.280022415452304},{&quot;rowKey&quot;:&quot;Row3855&quot;,&quot;value&quot;:10.144987898345047},{&quot;rowKey&quot;:&quot;Row496&quot;,&quot;value&quot;:3.2361940234262048},{&quot;rowKey&quot;:&quot;Row2963&quot;,&quot;value&quot;:4.198676629125799},{&quot;rowKey&quot;:&quot;Row1110&quot;,&quot;value&quot;:4.049320547634912},{&quot;rowKey&quot;:&quot;Row3600&quot;,&quot;value&quot;:4.08771835350632},{&quot;rowKey&quot;:&quot;Row2771&quot;,&quot;value&quot;:3.9502246874597167},{&quot;rowKey&quot;:&quot;Row3466&quot;,&quot;value&quot;:9.926146707375546},{&quot;rowKey&quot;:&quot;Row4412&quot;,&quot;value&quot;:4.209620425081933},{&quot;rowKey&quot;:&quot;Row4318&quot;,&quot;value&quot;:4.125278089529127},{&quot;rowKey&quot;:&quot;Row1531&quot;,&quot;value&quot;:9.794898313879164},{&quot;rowKey&quot;:&quot;Row1757&quot;,&quot;value&quot;:3.9696316523619535},{&quot;rowKey&quot;:&quot;Row2066&quot;,&quot;value&quot;:10.219901981473976},{&quot;rowKey&quot;:&quot;Row1536&quot;,&quot;value&quot;:10.759588335938624}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:7.002901987201934,&quot;min&quot;:3.2361940234262048,&quot;lowerWhisker&quot;:4.290193826454372,&quot;lowerQuartile&quot;:6.299155512579741,&quot;upperQuartile&quot;:7.666099794498402,&quot;upperWhisker&quot;:9.715722673047582,&quot;max&quot;:10.759588335938624},&quot;Avg. Area Number of Bedrooms&quot;:{&quot;mildOutliers&quot;:[],&quot;extremeOutliers&quot;:[],&quot;median&quot;:4.05,&quot;min&quot;:2.0,&quot;lowerWhisker&quot;:2.0,&quot;lowerQuartile&quot;:3.14,&quot;upperQuartile&quot;:4.49,&quot;upperWhisker&quot;:6.5,&quot;max&quot;:6.5},&quot;Area Population&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row4182&quot;,&quot;value&quot;:7234.963520742314},{&quot;rowKey&quot;:&quot;Row314&quot;,&quot;value&quot;:172.61068627290044},{&quot;rowKey&quot;:&quot;Row1234&quot;,&quot;value&quot;:67353.96520386345},{&quot;rowKey&quot;:&quot;Row2534&quot;,&quot;value&quot;:4114.489353324316},{&quot;rowKey&quot;:&quot;Row2756&quot;,&quot;value&quot;:3883.448164008629},{&quot;rowKey&quot;:&quot;Row3540&quot;,&quot;value&quot;:6821.950228499864},{&quot;rowKey&quot;:&quot;Row3120&quot;,&quot;value&quot;:6805.740783110475},{&quot;rowKey&quot;:&quot;Row4290&quot;,&quot;value&quot;:7360.295191263632},{&quot;rowKey&quot;:&quot;Row4716&quot;,&quot;value&quot;:67727.22905070162},{&quot;rowKey&quot;:&quot;Row2829&quot;,&quot;value&quot;:6248.756079633426},{&quot;rowKey&quot;:&quot;Row2422&quot;,&quot;value&quot;:65857.93332223437},{&quot;rowKey&quot;:&quot;Row3442&quot;,&quot;value&quot;:63620.01196321367},{&quot;rowKey&quot;:&quot;Row2603&quot;,&quot;value&quot;:65184.578469023545},{&quot;rowKey&quot;:&quot;Row2392&quot;,&quot;value&quot;:7522.333137672428},{&quot;rowKey&quot;:&quot;Row1965&quot;,&quot;value&quot;:64566.68738030215},{&quot;rowKey&quot;:&quot;Row2173&quot;,&quot;value&quot;:67601.22355787536},{&quot;rowKey&quot;:&quot;Row2380&quot;,&quot;value&quot;:64149.68021309122},{&quot;rowKey&quot;:&quot;Row3991&quot;,&quot;value&quot;:68311.69582174483},{&quot;rowKey&quot;:&quot;Row3134&quot;,&quot;value&quot;:66995.47404943168},{&quot;rowKey&quot;:&quot;Row228&quot;,&quot;value&quot;:69575.4494636571},{&quot;rowKey&quot;:&quot;Row2839&quot;,&quot;value&quot;:67701.64979544005},{&quot;rowKey&quot;:&quot;Row1595&quot;,&quot;value&quot;:69592.04023598543},{&quot;rowKey&quot;:&quot;Row3387&quot;,&quot;value&quot;:64180.37080108071},{&quot;rowKey&quot;:&quot;Row4803&quot;,&quot;value&quot;:69621.7133777904},{&quot;rowKey&quot;:&quot;Row2108&quot;,&quot;value&quot;:64543.322446134494},{&quot;rowKey&quot;:&quot;Row1530&quot;,&quot;value&quot;:3285.4505375208782},{&quot;rowKey&quot;:&quot;Row1361&quot;,&quot;value&quot;:63184.613147230324},{&quot;rowKey&quot;:&quot;Row353&quot;,&quot;value&quot;:69553.98832715878},{&quot;rowKey&quot;:&quot;Row4684&quot;,&quot;value&quot;:9193.833182319459},{&quot;rowKey&quot;:&quot;Row4491&quot;,&quot;value&quot;:5727.485885269864}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:36199.40668926055,&quot;min&quot;:172.61068627290044,&quot;lowerWhisker&quot;:9487.921585477769,&quot;lowerQuartile&quot;:29403.78982026877,&quot;upperQuartile&quot;:42865.210579351966,&quot;upperWhisker&quot;:62963.75539456241,&quot;max&quot;:69621.7133777904},&quot;Price&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row4129&quot;,&quot;value&quot;:2187326.442764148},{&quot;rowKey&quot;:&quot;Row622&quot;,&quot;value&quot;:2252243.340472784},{&quot;rowKey&quot;:&quot;Row2719&quot;,&quot;value&quot;:2370231.3201015536},{&quot;rowKey&quot;:&quot;Row3091&quot;,&quot;value&quot;:268050.81474351394},{&quot;rowKey&quot;:&quot;Row1208&quot;,&quot;value&quot;:2198564.5726747084},{&quot;rowKey&quot;:&quot;Row715&quot;,&quot;value&quot;:2237778.0257039685},{&quot;rowKey&quot;:&quot;Row924&quot;,&quot;value&quot;:2330289.700683439},{&quot;rowKey&quot;:&quot;Row693&quot;,&quot;value&quot;:2332110.740124409},{&quot;rowKey&quot;:&quot;Row4451&quot;,&quot;value&quot;:253185.70150858175},{&quot;rowKey&quot;:&quot;Row1271&quot;,&quot;value&quot;:31140.517620186045},{&quot;rowKey&quot;:&quot;Row90&quot;,&quot;value&quot;:201898.08657249613},{&quot;rowKey&quot;:&quot;Row901&quot;,&quot;value&quot;:2271112.743827721},{&quot;rowKey&quot;:&quot;Row1459&quot;,&quot;value&quot;:143027.36445248185},{&quot;rowKey&quot;:&quot;Row1356&quot;,&quot;value&quot;:239319.93417545114},{&quot;rowKey&quot;:&quot;Row1578&quot;,&quot;value&quot;:211017.97049475575},{&quot;rowKey&quot;:&quot;Row990&quot;,&quot;value&quot;:2185480.090688329},{&quot;rowKey&quot;:&quot;Row3502&quot;,&quot;value&quot;:2190338.6106485426},{&quot;rowKey&quot;:&quot;Row2756&quot;,&quot;value&quot;:231189.8209898588},{&quot;rowKey&quot;:&quot;Row263&quot;,&quot;value&quot;:152071.87474956046},{&quot;rowKey&quot;:&quot;Row3212&quot;,&quot;value&quot;:15938.657923287848},{&quot;rowKey&quot;:&quot;Row1536&quot;,&quot;value&quot;:2235294.7182697523},{&quot;rowKey&quot;:&quot;Row696&quot;,&quot;value&quot;:283208.13218687923},{&quot;rowKey&quot;:&quot;Row1485&quot;,&quot;value&quot;:2186194.7925734245},{&quot;rowKey&quot;:&quot;Row1799&quot;,&quot;value&quot;:88591.77016003926},{&quot;rowKey&quot;:&quot;Row465&quot;,&quot;value&quot;:2469065.5941747027},{&quot;rowKey&quot;:&quot;Row4400&quot;,&quot;value&quot;:2219724.161793017},{&quot;rowKey&quot;:&quot;Row1516&quot;,&quot;value&quot;:2220799.0691561657},{&quot;rowKey&quot;:&quot;Row2300&quot;,&quot;value&quot;:2275455.305532437},{&quot;rowKey&quot;:&quot;Row1248&quot;,&quot;value&quot;:2318285.703336616},{&quot;rowKey&quot;:&quot;Row3922&quot;,&quot;value&quot;:266298.8811183604},{&quot;rowKey&quot;:&quot;Row2795&quot;,&quot;value&quot;:2197436.8754965314},{&quot;rowKey&quot;:&quot;Row2538&quot;,&quot;value&quot;:2294647.78381303},{&quot;rowKey&quot;:&quot;Row256&quot;,&quot;value&quot;:2298379.48670761},{&quot;rowKey&quot;:&quot;Row1661&quot;,&quot;value&quot;:151527.0826265551},{&quot;rowKey&quot;:&quot;Row355&quot;,&quot;value&quot;:2249122.541335193}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:1232669.3779657914,&quot;min&quot;:15938.657923287848,&quot;lowerWhisker&quot;:287307.583688923,&quot;lowerQuartile&quot;:997535.5903280952,&quot;upperQuartile&quot;:1471388.9878472905,&quot;upperWhisker&quot;:2180065.597738638,&quot;max&quot;:2469065.5941747027}},&quot;m_excludedDataCols&quot;:[],&quot;m_numMissValPerCol&quot;:{},&quot;excludedDataCols&quot;:[],&quot;numMissValPerCol&quot;:{},&quot;stats&quot;:{&quot;Avg. Area Income&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row558&quot;,&quot;value&quot;:99629.01358134777},{&quot;rowKey&quot;:&quot;Row2025&quot;,&quot;value&quot;:38139.919044520015},{&quot;rowKey&quot;:&quot;Row2300&quot;,&quot;value&quot;:98468.2536411164},{&quot;rowKey&quot;:&quot;Row411&quot;,&quot;value&quot;:36100.444226680745},{&quot;rowKey&quot;:&quot;Row3069&quot;,&quot;value&quot;:35454.714659475445},{&quot;rowKey&quot;:&quot;Row2242&quot;,&quot;value&quot;:38868.25031141422},{&quot;rowKey&quot;:&quot;Row4449&quot;,&quot;value&quot;:39777.606906208486},{&quot;rowKey&quot;:&quot;Row1096&quot;,&quot;value&quot;:97548.31041260507},{&quot;rowKey&quot;:&quot;Row12&quot;,&quot;value&quot;:39033.809236982364},{&quot;rowKey&quot;:&quot;Row844&quot;,&quot;value&quot;:39411.652787814426},{&quot;rowKey&quot;:&quot;Row3541&quot;,&quot;value&quot;:102881.12090226932},{&quot;rowKey&quot;:&quot;Row1891&quot;,&quot;value&quot;:101144.3239296864},{&quot;rowKey&quot;:&quot;Row4716&quot;,&quot;value&quot;:38530.12447825256},{&quot;rowKey&quot;:&quot;Row4844&quot;,&quot;value&quot;:37908.67586272925},{&quot;rowKey&quot;:&quot;Row2597&quot;,&quot;value&quot;:38734.005216471945},{&quot;rowKey&quot;:&quot;Row1597&quot;,&quot;value&quot;:39294.036523316114},{&quot;rowKey&quot;:&quot;Row3798&quot;,&quot;value&quot;:97669.06449084358},{&quot;rowKey&quot;:&quot;Row4400&quot;,&quot;value&quot;:99317.82314540037},{&quot;rowKey&quot;:&quot;Row962&quot;,&quot;value&quot;:101928.85805987818},{&quot;rowKey&quot;:&quot;Row4744&quot;,&quot;value&quot;:39653.77003073781},{&quot;rowKey&quot;:&quot;Row2719&quot;,&quot;value&quot;:101599.6705804352},{&quot;rowKey&quot;:&quot;Row2092&quot;,&quot;value&quot;:35608.986237077515},{&quot;rowKey&quot;:&quot;Row1271&quot;,&quot;value&quot;:37971.20756623529},{&quot;rowKey&quot;:&quot;Row4087&quot;,&quot;value&quot;:100741.29858525377},{&quot;rowKey&quot;:&quot;Row3144&quot;,&quot;value&quot;:38571.963669753466},{&quot;rowKey&quot;:&quot;Row1734&quot;,&quot;value&quot;:104702.7242570266},{&quot;rowKey&quot;:&quot;Row3183&quot;,&quot;value&quot;:38122.524488262905},{&quot;rowKey&quot;:&quot;Row4855&quot;,&quot;value&quot;:35797.323121548245},{&quot;rowKey&quot;:&quot;Row1459&quot;,&quot;value&quot;:35963.330809062856},{&quot;rowKey&quot;:&quot;Row3483&quot;,&quot;value&quot;:97881.58727937557},{&quot;rowKey&quot;:&quot;Row693&quot;,&quot;value&quot;:107701.74837763935}],&quot;extremeOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row39&quot;,&quot;value&quot;:17796.631189543397}],&quot;median&quot;:68804.28640371616,&quot;min&quot;:17796.631189543397,&quot;lowerWhisker&quot;:40141.566476517415,&quot;lowerQuartile&quot;:61479.919568829755,&quot;upperQuartile&quot;:75784.34219203914,&quot;upperWhisker&quot;:97112.361251824,&quot;max&quot;:107701.74837763935},&quot;Avg. Area House Age&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row1494&quot;,&quot;value&quot;:3.2148681463036715},{&quot;rowKey&quot;:&quot;Row4859&quot;,&quot;value&quot;:8.91609294469722},{&quot;rowKey&quot;:&quot;Row1074&quot;,&quot;value&quot;:2.644304186036705},{&quot;rowKey&quot;:&quot;Row4324&quot;,&quot;value&quot;:3.0047168362430168},{&quot;rowKey&quot;:&quot;Row2898&quot;,&quot;value&quot;:9.125282872631168},{&quot;rowKey&quot;:&quot;Row1726&quot;,&quot;value&quot;:3.205828406711825},{&quot;rowKey&quot;:&quot;Row4565&quot;,&quot;value&quot;:2.7976190270628174},{&quot;rowKey&quot;:&quot;Row2465&quot;,&quot;value&quot;:2.9227361530512215},{&quot;rowKey&quot;:&quot;Row1859&quot;,&quot;value&quot;:3.1057512377015195},{&quot;rowKey&quot;:&quot;Row2366&quot;,&quot;value&quot;:3.2417159800155395},{&quot;rowKey&quot;:&quot;Row1855&quot;,&quot;value&quot;:8.68843407427393},{&quot;rowKey&quot;:&quot;Row1091&quot;,&quot;value&quot;:8.991399330611651},{&quot;rowKey&quot;:&quot;Row847&quot;,&quot;value&quot;:3.2782275964055096},{&quot;rowKey&quot;:&quot;Row1777&quot;,&quot;value&quot;:8.973440775154549},{&quot;rowKey&quot;:&quot;Row1628&quot;,&quot;value&quot;:2.6830429033311556},{&quot;rowKey&quot;:&quot;Row4429&quot;,&quot;value&quot;:3.118801699824495},{&quot;rowKey&quot;:&quot;Row2432&quot;,&quot;value&quot;:3.1448941915387927},{&quot;rowKey&quot;:&quot;Row3138&quot;,&quot;value&quot;:9.008900092194578},{&quot;rowKey&quot;:&quot;Row3831&quot;,&quot;value&quot;:3.2320594904933926},{&quot;rowKey&quot;:&quot;Row1285&quot;,&quot;value&quot;:3.055370327387371},{&quot;rowKey&quot;:&quot;Row3989&quot;,&quot;value&quot;:9.51908806613594},{&quot;rowKey&quot;:&quot;Row4978&quot;,&quot;value&quot;:8.899713346862931},{&quot;rowKey&quot;:&quot;Row918&quot;,&quot;value&quot;:8.764785540314001},{&quot;rowKey&quot;:&quot;Row4488&quot;,&quot;value&quot;:2.7972149539129383},{&quot;rowKey&quot;:&quot;Row3388&quot;,&quot;value&quot;:8.702959652056817}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:5.970428947124802,&quot;min&quot;:2.644304186036705,&quot;lowerWhisker&quot;:3.3425991736536087,&quot;lowerQuartile&quot;:5.322278623622729,&quot;upperQuartile&quot;:6.650870225607854,&quot;upperWhisker&quot;:8.641820766251389,&quot;max&quot;:9.51908806613594},&quot;Avg. Area Number of Rooms&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row1799&quot;,&quot;value&quot;:3.950972652889892},{&quot;rowKey&quot;:&quot;Row28&quot;,&quot;value&quot;:4.242191301572632},{&quot;rowKey&quot;:&quot;Row2676&quot;,&quot;value&quot;:9.921519788746023},{&quot;rowKey&quot;:&quot;Row1423&quot;,&quot;value&quot;:4.129733360831915},{&quot;rowKey&quot;:&quot;Row3803&quot;,&quot;value&quot;:4.147430721617345},{&quot;rowKey&quot;:&quot;Row3806&quot;,&quot;value&quot;:10.024375374429383},{&quot;rowKey&quot;:&quot;Row3922&quot;,&quot;value&quot;:4.027930715527429},{&quot;rowKey&quot;:&quot;Row4777&quot;,&quot;value&quot;:9.802010413706904},{&quot;rowKey&quot;:&quot;Row2503&quot;,&quot;value&quot;:9.841095462796725},{&quot;rowKey&quot;:&quot;Row3039&quot;,&quot;value&quot;:9.916528434831127},{&quot;rowKey&quot;:&quot;Row3336&quot;,&quot;value&quot;:10.280022415452304},{&quot;rowKey&quot;:&quot;Row3855&quot;,&quot;value&quot;:10.144987898345047},{&quot;rowKey&quot;:&quot;Row496&quot;,&quot;value&quot;:3.2361940234262048},{&quot;rowKey&quot;:&quot;Row2963&quot;,&quot;value&quot;:4.198676629125799},{&quot;rowKey&quot;:&quot;Row1110&quot;,&quot;value&quot;:4.049320547634912},{&quot;rowKey&quot;:&quot;Row3600&quot;,&quot;value&quot;:4.08771835350632},{&quot;rowKey&quot;:&quot;Row2771&quot;,&quot;value&quot;:3.9502246874597167},{&quot;rowKey&quot;:&quot;Row3466&quot;,&quot;value&quot;:9.926146707375546},{&quot;rowKey&quot;:&quot;Row4412&quot;,&quot;value&quot;:4.209620425081933},{&quot;rowKey&quot;:&quot;Row4318&quot;,&quot;value&quot;:4.125278089529127},{&quot;rowKey&quot;:&quot;Row1531&quot;,&quot;value&quot;:9.794898313879164},{&quot;rowKey&quot;:&quot;Row1757&quot;,&quot;value&quot;:3.9696316523619535},{&quot;rowKey&quot;:&quot;Row2066&quot;,&quot;value&quot;:10.219901981473976},{&quot;rowKey&quot;:&quot;Row1536&quot;,&quot;value&quot;:10.759588335938624}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:7.002901987201934,&quot;min&quot;:3.2361940234262048,&quot;lowerWhisker&quot;:4.290193826454372,&quot;lowerQuartile&quot;:6.299155512579741,&quot;upperQuartile&quot;:7.666099794498402,&quot;upperWhisker&quot;:9.715722673047582,&quot;max&quot;:10.759588335938624},&quot;Avg. Area Number of Bedrooms&quot;:{&quot;mildOutliers&quot;:[],&quot;extremeOutliers&quot;:[],&quot;median&quot;:4.05,&quot;min&quot;:2.0,&quot;lowerWhisker&quot;:2.0,&quot;lowerQuartile&quot;:3.14,&quot;upperQuartile&quot;:4.49,&quot;upperWhisker&quot;:6.5,&quot;max&quot;:6.5},&quot;Area Population&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row4182&quot;,&quot;value&quot;:7234.963520742314},{&quot;rowKey&quot;:&quot;Row314&quot;,&quot;value&quot;:172.61068627290044},{&quot;rowKey&quot;:&quot;Row1234&quot;,&quot;value&quot;:67353.96520386345},{&quot;rowKey&quot;:&quot;Row2534&quot;,&quot;value&quot;:4114.489353324316},{&quot;rowKey&quot;:&quot;Row2756&quot;,&quot;value&quot;:3883.448164008629},{&quot;rowKey&quot;:&quot;Row3540&quot;,&quot;value&quot;:6821.950228499864},{&quot;rowKey&quot;:&quot;Row3120&quot;,&quot;value&quot;:6805.740783110475},{&quot;rowKey&quot;:&quot;Row4290&quot;,&quot;value&quot;:7360.295191263632},{&quot;rowKey&quot;:&quot;Row4716&quot;,&quot;value&quot;:67727.22905070162},{&quot;rowKey&quot;:&quot;Row2829&quot;,&quot;value&quot;:6248.756079633426},{&quot;rowKey&quot;:&quot;Row2422&quot;,&quot;value&quot;:65857.93332223437},{&quot;rowKey&quot;:&quot;Row3442&quot;,&quot;value&quot;:63620.01196321367},{&quot;rowKey&quot;:&quot;Row2603&quot;,&quot;value&quot;:65184.578469023545},{&quot;rowKey&quot;:&quot;Row2392&quot;,&quot;value&quot;:7522.333137672428},{&quot;rowKey&quot;:&quot;Row1965&quot;,&quot;value&quot;:64566.68738030215},{&quot;rowKey&quot;:&quot;Row2173&quot;,&quot;value&quot;:67601.22355787536},{&quot;rowKey&quot;:&quot;Row2380&quot;,&quot;value&quot;:64149.68021309122},{&quot;rowKey&quot;:&quot;Row3991&quot;,&quot;value&quot;:68311.69582174483},{&quot;rowKey&quot;:&quot;Row3134&quot;,&quot;value&quot;:66995.47404943168},{&quot;rowKey&quot;:&quot;Row228&quot;,&quot;value&quot;:69575.4494636571},{&quot;rowKey&quot;:&quot;Row2839&quot;,&quot;value&quot;:67701.64979544005},{&quot;rowKey&quot;:&quot;Row1595&quot;,&quot;value&quot;:69592.04023598543},{&quot;rowKey&quot;:&quot;Row3387&quot;,&quot;value&quot;:64180.37080108071},{&quot;rowKey&quot;:&quot;Row4803&quot;,&quot;value&quot;:69621.7133777904},{&quot;rowKey&quot;:&quot;Row2108&quot;,&quot;value&quot;:64543.322446134494},{&quot;rowKey&quot;:&quot;Row1530&quot;,&quot;value&quot;:3285.4505375208782},{&quot;rowKey&quot;:&quot;Row1361&quot;,&quot;value&quot;:63184.613147230324},{&quot;rowKey&quot;:&quot;Row353&quot;,&quot;value&quot;:69553.98832715878},{&quot;rowKey&quot;:&quot;Row4684&quot;,&quot;value&quot;:9193.833182319459},{&quot;rowKey&quot;:&quot;Row4491&quot;,&quot;value&quot;:5727.485885269864}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:36199.40668926055,&quot;min&quot;:172.61068627290044,&quot;lowerWhisker&quot;:9487.921585477769,&quot;lowerQuartile&quot;:29403.78982026877,&quot;upperQuartile&quot;:42865.210579351966,&quot;upperWhisker&quot;:62963.75539456241,&quot;max&quot;:69621.7133777904},&quot;Price&quot;:{&quot;mildOutliers&quot;:[{&quot;rowKey&quot;:&quot;Row4129&quot;,&quot;value&quot;:2187326.442764148},{&quot;rowKey&quot;:&quot;Row622&quot;,&quot;value&quot;:2252243.340472784},{&quot;rowKey&quot;:&quot;Row2719&quot;,&quot;value&quot;:2370231.3201015536},{&quot;rowKey&quot;:&quot;Row3091&quot;,&quot;value&quot;:268050.81474351394},{&quot;rowKey&quot;:&quot;Row1208&quot;,&quot;value&quot;:2198564.5726747084},{&quot;rowKey&quot;:&quot;Row715&quot;,&quot;value&quot;:2237778.0257039685},{&quot;rowKey&quot;:&quot;Row924&quot;,&quot;value&quot;:2330289.700683439},{&quot;rowKey&quot;:&quot;Row693&quot;,&quot;value&quot;:2332110.740124409},{&quot;rowKey&quot;:&quot;Row4451&quot;,&quot;value&quot;:253185.70150858175},{&quot;rowKey&quot;:&quot;Row1271&quot;,&quot;value&quot;:31140.517620186045},{&quot;rowKey&quot;:&quot;Row90&quot;,&quot;value&quot;:201898.08657249613},{&quot;rowKey&quot;:&quot;Row901&quot;,&quot;value&quot;:2271112.743827721},{&quot;rowKey&quot;:&quot;Row1459&quot;,&quot;value&quot;:143027.36445248185},{&quot;rowKey&quot;:&quot;Row1356&quot;,&quot;value&quot;:239319.93417545114},{&quot;rowKey&quot;:&quot;Row1578&quot;,&quot;value&quot;:211017.97049475575},{&quot;rowKey&quot;:&quot;Row990&quot;,&quot;value&quot;:2185480.090688329},{&quot;rowKey&quot;:&quot;Row3502&quot;,&quot;value&quot;:2190338.6106485426},{&quot;rowKey&quot;:&quot;Row2756&quot;,&quot;value&quot;:231189.8209898588},{&quot;rowKey&quot;:&quot;Row263&quot;,&quot;value&quot;:152071.87474956046},{&quot;rowKey&quot;:&quot;Row3212&quot;,&quot;value&quot;:15938.657923287848},{&quot;rowKey&quot;:&quot;Row1536&quot;,&quot;value&quot;:2235294.7182697523},{&quot;rowKey&quot;:&quot;Row696&quot;,&quot;value&quot;:283208.13218687923},{&quot;rowKey&quot;:&quot;Row1485&quot;,&quot;value&quot;:2186194.7925734245},{&quot;rowKey&quot;:&quot;Row1799&quot;,&quot;value&quot;:88591.77016003926},{&quot;rowKey&quot;:&quot;Row465&quot;,&quot;value&quot;:2469065.5941747027},{&quot;rowKey&quot;:&quot;Row4400&quot;,&quot;value&quot;:2219724.161793017},{&quot;rowKey&quot;:&quot;Row1516&quot;,&quot;value&quot;:2220799.0691561657},{&quot;rowKey&quot;:&quot;Row2300&quot;,&quot;value&quot;:2275455.305532437},{&quot;rowKey&quot;:&quot;Row1248&quot;,&quot;value&quot;:2318285.703336616},{&quot;rowKey&quot;:&quot;Row3922&quot;,&quot;value&quot;:266298.8811183604},{&quot;rowKey&quot;:&quot;Row2795&quot;,&quot;value&quot;:2197436.8754965314},{&quot;rowKey&quot;:&quot;Row2538&quot;,&quot;value&quot;:2294647.78381303},{&quot;rowKey&quot;:&quot;Row256&quot;,&quot;value&quot;:2298379.48670761},{&quot;rowKey&quot;:&quot;Row1661&quot;,&quot;value&quot;:151527.0826265551},{&quot;rowKey&quot;:&quot;Row355&quot;,&quot;value&quot;:2249122.541335193}],&quot;extremeOutliers&quot;:[],&quot;median&quot;:1232669.3779657914,&quot;min&quot;:15938.657923287848,&quot;lowerWhisker&quot;:287307.583688923,&quot;lowerQuartile&quot;:997535.5903280952,&quot;upperQuartile&quot;:1471388.9878472905,&quot;upperWhisker&quot;:2180065.597738638,&quot;max&quot;:2469065.5941747027}}}"/>
        </config>
    </config>
    <entry key="warnMessage" type="xstring" value=""/>
    <entry key="errorMessage" type="xstring" value=""/>
</config>
