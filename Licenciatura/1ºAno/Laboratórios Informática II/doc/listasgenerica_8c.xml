<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="listasgenerica_8c" kind="file" language="C++">
    <compoundname>listasgenerica.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="listasgenerica_8h" local="yes">listasgenerica.h</includes>
    <incdepgraph>
      <node id="61">
        <label>stdlib.h</label>
      </node>
      <node id="60">
        <label>projeto/listasgenerica.c</label>
        <link refid="listasgenerica_8c"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>listasgenerica.h</label>
        <link refid="listasgenerica_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="listasgenerica_8c_1a562139d4f8346894fa191c6aa9650ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA cria_lista</definition>
        <argsstring>()</argsstring>
        <name>cria_lista</name>
        <briefdescription>
<para>Função que inicializa uma lista vazia. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Lista criada. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="4" column="1" bodyfile="projeto/listasgenerica.c" bodystart="4" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1a37ba5fc3cfddb6bc94d4b54b00bc696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Função para inserir elementos na cabeça da lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser atualizada. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*valor</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o valor a ser adicionado à lista. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista atualizada. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="12" column="1" bodyfile="projeto/listasgenerica.c" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cabeça de uma lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser analisada. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Apontador para o valor da cabeça da lista. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="19" column="1" bodyfile="projeto/listasgenerica.c" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que avança a lista para o seu elemento seguinte. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser modificada. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista modificada. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="24" column="1" bodyfile="projeto/listasgenerica.c" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que remove a cabeça de uma lista devolvendo o elemento seguinte. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser modificada. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista sem o elemento à cabeça. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="28" column="1" bodyfile="projeto/listasgenerica.c" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que avalia se uma lista se encontra vazia (0 = Vazia). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser testada. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valor boleano. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="35" column="1" bodyfile="projeto/listasgenerica.c" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="listasgenerica_8c_1a52aacaf5667ce10178978c0807eb492d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void liberta_lista</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>liberta_lista</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que liberta todos os elementos da lista, apagando esta da memória. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista a ser libertada. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/listasgenerica.c" line="40" column="1" bodyfile="projeto/listasgenerica.c" bodystart="40" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;listasgenerica.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>cria_lista(){</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnodo" kindref="compound">nodo</ref>));</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp-&gt;val=NULL;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp-&gt;proximo=NULL;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>insere_cabeca(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>tmp<sp/>=<sp/>cria_lista();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/>tmp-&gt;val<sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/>tmp-&gt;proximo<sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*devolve_cabeca(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tmp<sp/>=<sp/>L-&gt;val;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>proximo(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L-&gt;proximo;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>remove_cabeca(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>tmp<sp/>=<sp/>L-&gt;proximo;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>free(L-&gt;val);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>free(L);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lista_esta_vazia(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;val<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>liberta_lista(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lista_esta_vazia(L)<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>remove_cabeca(L);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>free(L);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="projeto/listasgenerica.c"/>
  </compounddef>
</doxygen>
